{"version":3,"sources":["trainspotting.jpg","shawshank.jpg","historyx.jpg","Movies.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Movies","value","onChange","className","type","event","target","id","tablist","rating","CardImg","Cover0","title","Cover2","Cover3","App","props","state","movies","titleFilter","minRating","nextValue","prevValue","name","this","setState","newMovie","concat","newtitleFilter","starCount","onStarClick","bind","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yFAAAA,EAAOC,QAAU,IAA0B,2C,gBCA3CD,EAAOC,QAAU,IAA0B,uC,gBCA3CD,EAAOC,QAAU,IAA0B,sC,qMCoB5BC,G,MAnBD,SAAC,GAA4B,IAA3BC,EAA0B,EAA1BA,MAA0B,IAApBC,gBAAoB,MAAX,aAAW,EACtC,OAEQ,yBAAKC,UAAU,UACX,gCACA,2BAAOC,KAAK,OACTF,SAAU,SAACG,GAAD,OAASH,EAASG,EAAMC,OAAOL,QACzCM,GAAG,cACHN,MAAOA,IACV,4BAAQG,KAAK,SAASG,GAAG,gBAAgBN,MAAM,UAA/C,UALA,MAK0E,wBAAIE,UAAU,SAAd,6B,gECDpFK,EAAU,CACd,CAAED,GAAI,SAAUE,OAAQ,IAAKC,QAAS,CAACC,YAASC,MAAO,iBACvD,CAAEL,GAAI,SAAUE,OAAQ,IAAKC,QAAS,CAACG,YAASD,MAAO,yBACtD,CAAEL,GAAI,SAAUE,OAAQ,IAAKC,QAAS,CAACI,YAASF,MAAO,uBA0C3CG,E,YArCb,WAAYC,GAAO,IAAD,8BAClB,4CAAMA,KACDC,MAAM,CACTC,OAAOV,EACPW,YAAY,GACZC,UAAW,GALK,E,yEASNC,EAAWC,EAAWC,GAChCC,KAAKC,SAAS,CAACL,UAAWC,M,kCAEhBK,GACVF,KAAKC,SAAS,CACZP,OAAQM,KAAKP,MAAMC,OAAOS,OAAOD,O,+BAG3B,IAAD,OACP,OACA,yBAAKvB,UAAU,OACb,yBAAKA,UAAU,aACb,yBAAKA,UAAU,mBACd,kBAAC,EAAD,CACAD,SAAU,SAAC0B,GAAD,OAAkB,EAAKH,SAAS,CAACN,YAAYS,KACvD3B,MAAOuB,KAAKP,MAAME,cAClB,kBAAC,IAAD,CACWI,KAAK,QACLM,UAAW,EACX5B,MAAOuB,KAAKP,MAAMG,UAClBU,YAAaN,KAAKM,YAAYC,KAAKP,e,GA9BpCQ,aCJCC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.fa1bf985.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/trainspotting.60df5080.jpg\";","module.exports = __webpack_public_path__ + \"static/media/shawshank.72ad4bdb.jpg\";","module.exports = __webpack_public_path__ + \"static/media/historyx.4b00deb6.jpg\";","import React from 'react' ;\r\nconst Movies =({value,onChange=()=>{}})=> {\r\n    return ( \r\n         \r\n            <div className=\"Card-1\">\r\n                <center > \r\n                <input type=\"text\"   \r\n                   onChange={(event)=>onChange(event.target.value)}\r\n                   id=\"Card-1-text\" \r\n                   value={value}/>\r\n                <button type=\"button\" id=\"header-search\" value=\"Search\">Search</button>   <h5 className='title'>Minimum Movies Rating \r\n                </h5>\r\n        </center>\r\n        </div>\r\n                  \r\n    \r\n     )\r\n}\r\n\r\n\r\nexport default Movies;","import React, { Component } from 'react';\nimport './App.css';\nimport Movies from './Movies';\nimport Cover0 from './trainspotting.jpg';\nimport Cover2 from './shawshank.jpg';\nimport Cover3 from './historyx.jpg';\nimport StarRatingComponent from 'react-star-rating-component';\n\n\nconst tablist = [\n  { id: 'movie1', rating: '2', CardImg: {Cover0}, title: 'Trainspotting' }, \n  { id: 'movie2', rating: '3', CardImg: {Cover2}, title: 'Shawshank Redemption ' },\n   { id: 'movie3', rating: '5', CardImg: {Cover3}, title: 'American History X' }\n  ]\n\n\nclass App  extends Component {\n  constructor(props){ \n  super(props); \n  this.state={ \n    movies:tablist,\n    titleFilter:'',\n    minRating: 2\n   \n  }\n  }\n  onStarClick(nextValue, prevValue, name) {\n    this.setState({minRating: nextValue});\n  }\n  addNewMovie(newMovie) {\n    this.setState({\n      movies: this.state.movies.concat(newMovie)\n    })\n  }\n  render() {\n    return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className='row name-rating'>\n         <Movies \n         onChange={(newtitleFilter)=>this.setState({titleFilter:newtitleFilter})} \n         value={this.state.titleFilter}/>\n         <StarRatingComponent \n                    name=\"rate1\" \n                    starCount={5} \n                    value={this.state.minRating}\n                    onStarClick={this.onStarClick.bind(this)}/>\n      \n         </div> \n          \n      </div>\n    </div>)}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}